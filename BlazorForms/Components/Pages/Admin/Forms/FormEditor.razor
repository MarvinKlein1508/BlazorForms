@page "/Admin/FormEditor/"
@page "/Admin/FormEditor/{FormId:int}"
@attribute [Authorize(Roles = Roles.EDIT_FORMS)]
@using BlazorForms.Components.Admin.Forms
@layout EmptyLayout
@inherits BlazorFormsComponentBase
@inject IOptions<EmailSettings> emailConfig
@inject FormService formService
@inject UserService userService
@inject NavigationManager navigationManager
@inject DragDropService<FormElement> dragDropServiceElements
@inject DragDropService<FormRow> dragDropServiceRows
@inject DragDropService<FormColumn> dragDropServiceColumns
@inject HotKeys hotKeys
@inject IStringLocalizer<FormEditor> localizer
@implements IDisposable
<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
@if (Input is null)
{
    <div class="loading-wrapper">
        <Spinner />
    </div>
}
else
{
    <PageTitle>@(Input.FormId > 0 ? localizer["PAGETITLE_EDIT"] : localizer["PAGETITLE_NEW"])</PageTitle>
    <div class="toolbar-toggle">
        <button type="button" class="btn-toolbar @(_showMobileToolbar ? "bg-danger" : "bg-success")" @onclick="() => _showMobileToolbar = !_showMobileToolbar">
            @if (!_showMobileToolbar)
            {
                <i class="bi bi-plus-lg " />
            }
            else
            {
                <i class="bi bi-x-lg" />
            }
        </button>
    </div>
    <div class="form-editor-wrapper">
        <div class="form-editor">
            <div class="form-editor-header">
                <div id="topbar">
                    <button type="button" class="btn btn-secondary" @onclick="CloseItemAsync"><Icon Name="IconName.Reply" /></button>
                    <button type="button" class="btn btn-primary" @onclick="() => EditFormProperties = true"><Icon Name="IconName.PencilSquare" /></button>
                    <button type="button" class="btn btn-success" @onclick="SaveAsync">@AppLocalizer["BUTTON_TEXT_SAVE"]</button>

                    <div class="delete-wrapper delete-wrapper-mobile @GetDeleteWrapperClass()">
                        <div class="delete-zone"
                             ondragover="event.preventDefault();"
                             ondragstart="event.dataTransfer.setData('', event.target.id);"
                        @ondrop="() => DropDelete()">
                            <i class="bi bi-trash" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-editor-content">
                @if (SelectedFormElement is not null && !EditFormProperties)
                {
                    <div class="formular-element-editor">
                        <EditForm Model="SelectedFormElement">
                            <ul class="nav nav-pills mb-3 edit-page-nav-link" role="tablist">
                                <li class="nav-item">
                                    <button type="button" role="tab" class="@(GetTabNavClass(SelectedFormElement.ActiveTab is FormElementTabs.General))" @onclick="() => SelectedFormElement.ActiveTab = FormElementTabs.General">
                                        @localizer["TABS_GENERAL"]
                                    </button>
                                </li>
                                <li class="nav-item">
                                    <button type="button" role="tab" class="@(GetTabNavClass(SelectedFormElement.ActiveTab is FormElementTabs.Rules))" @onclick="() => SelectedFormElement.ActiveTab = FormElementTabs.Rules">
                                        @localizer["TABS_RULES"]
                                    </button>
                                </li>
                                @if (SelectedFormElement is FormTableElement)
                                {
                                    <li class="nav-item">
                                        <button type="button" role="tab" class="@(GetTabNavClass(SelectedFormElement.ActiveTab is FormElementTabs.Elements))" @onclick="() => SelectedFormElement.ActiveTab = FormElementTabs.Elements">
                                            @localizer["TABS_ELEMENTS"]
                                        </button>
                                    </li>
                                }
                                @if (SelectedFormElement is FormNumberElement)
                                {
                                    <li class="nav-item">
                                        <button type="button" role="tab" class="@(GetTabNavClass(SelectedFormElement.ActiveTab is FormElementTabs.CalcSets))" @onclick="() => SelectedFormElement.ActiveTab = FormElementTabs.CalcSets">
                                            @localizer["TABS_CALC"]
                                        </button>
                                    </li>
                                }
                                <li class="nav-item">
                                    <button type="button" role="tab" class="@(GetTabNavClass(SelectedFormElement.ActiveTab is FormElementTabs.Row))" @onclick="() => SelectedFormElement.ActiveTab = FormElementTabs.Row">
                                        @localizer["TABS_ROW_PROPERTIES"]
                                    </button>
                                </li>

                                <li class="nav-item">
                                    <button type="button" role="tab" class="@(GetTabNavClass(SelectedFormElement.ActiveTab is FormElementTabs.Column))" @onclick="() => SelectedFormElement.ActiveTab = FormElementTabs.Column">
                                        @localizer["TABS_COLUMN_PROPERTIES"]
                                    </button>
                                </li>
                            </ul>

                            <div class="tab-content">
                                <div class="@(GetTabClass(SelectedFormElement.ActiveTab is FormElementTabs.General))">
                                    <div class="col-12">
                                        <div class="form-floating mb-3">
                                            <input type="text" value="@SelectedFormElement.GetElementType()" class="form-control" id="formelement-type" placeholder="@localizer["TAB_GENERAL_LABEL_ELEMENT_TYPE"]" disabled />
                                            <label for="formelement-type">@localizer["TAB_GENERAL_LABEL_ELEMENT_TYPE"]</label>
                                        </div>

                                        <div class="form-floating mb-3">
                                            <InputText @bind-Value="SelectedFormElement.Name" class="form-control" id="formelement-name" placeholder="@localizer["TAB_GENERAL_LABEL_NAME"]" required />
                                            <label for="formelement-name">@localizer["TAB_GENERAL_LABEL_NAME"]</label>
                                            <ValidationMessage For="() => SelectedFormElement.Name" />
                                        </div>

                                        @if (SelectedFormElement is FormLabelElement labelElement)
                                        {
                                            <div class="mb-3">
                                                <label for="labelElement-description">@localizer["TAB_GENERAL_LABEL_DESCRIPTION"]</label>
                                                <InputCkEditor @bind-Value="labelElement.Description" />
                                                <ValidationMessage For="() => labelElement.Description" />
                                            </div>

                                            <div class="form-check">
                                                <div class="checkbox">
                                                    <InputCheckbox @bind-Value="labelElement.ShowOnPdf" id="labelElement-show_on_pdf" class="form-check-input" />
                                                    <label for="labelElement-show_on_pdf">@localizer["TAB_GENERAL_LABEL_SHOW_ON_PDF"]</label>
                                                    <ValidationMessage For="() => labelElement.ShowOnPdf" />
                                                </div>
                                            </div>
                                        }

                                        @if (SelectedFormElement is FormNumberElement numberElement)
                                        {
                                            <div class="form-floating mb-3">
                                                <InputNumber @bind-Value="numberElement.DecimalPlaces" class="form-control" id="numberelement-decimalPlaces" placeholder="@localizer["TAB_GENERAL_LABEL_DECIMAL_PLACES"]" />
                                                <label for="numberelement-decimalPlaces">@localizer["TAB_GENERAL_LABEL_DECIMAL_PLACES"]</label>
                                                <ValidationMessage For="() => numberElement.DecimalPlaces" />
                                            </div>

                                            <div class="form-floating mb-3">
                                                <InputNumber @bind-Value="numberElement.MinValue" class="form-control" id="numberelement-minvalue" placeholder="@localizer["TAB_GENERAL_LABEL_MIN_VALUE"]" />
                                                <label for="numberelement-minvalue">@localizer["TAB_GENERAL_LABEL_MIN_VALUE"]</label>
                                                <ValidationMessage For="() => numberElement.MinValue" />
                                            </div>

                                            <div class="form-floating mb-3">
                                                <InputNumber @bind-Value="numberElement.MaxValue" class="form-control" id="numberelement-maxvalue" placeholder="@localizer["TAB_GENERAL_LABEL_MAX_VALUE"]" />
                                                <label for="numberelement-maxvalue">@localizer["TAB_GENERAL_LABEL_MAX_VALUE"]</label>
                                                <ValidationMessage For="() => numberElement.MaxValue" />
                                            </div>

                                            @if (numberElement.TableParentElementId != 0)
                                            {
                                                <div class="form-check">
                                                    <div class="checkbox">
                                                        <InputCheckbox @bind-Value="numberElement.IsSummable" id="numberelement-issummable" class="form-check-input" />
                                                        <label for="numberelement-issummable">@localizer["TAB_GENERAL_LABEL_SUM_VALUES"]</label>
                                                        <ValidationMessage For="() => numberElement.IsSummable" />
                                                    </div>
                                                </div>
                                            }
                                        }

                                        @if (SelectedFormElement is FormDateElement dateElement)
                                        {

                                            <div class="form-floating mb-3">
                                                <InputDate @bind-Value="dateElement.MinDate" class="form-control" id="dateelement-minvalue" placeholder="@localizer["TAB_GENERAL_LABEL_MIN_VALUE"]" />
                                                <label for="dateelement-minvalue">@localizer["TAB_GENERAL_LABEL_MIN_VALUE"]</label>
                                                <ValidationMessage For="() => dateElement.MinDate" />
                                            </div>

                                            <div class="form-floating mb-3">
                                                <InputDate @bind-Value="dateElement.MaxDate" class="form-control" id="dateelement-maxvalue" placeholder="@localizer["TAB_GENERAL_LABEL_MAX_VALUE"]" />
                                                <label for="dateelement-maxvalue">@localizer["TAB_GENERAL_LABEL_MAX_VALUE"]</label>
                                                <ValidationMessage For="() => dateElement.MaxDate" />
                                            </div>

                                            <div class="form-check">
                                                <div class="checkbox">
                                                    <InputCheckbox @bind-Value="dateElement.SetDefaultValueToCurrentDate" id="dateElement-setCurrentDate" class="form-check-input" />
                                                    <label for="dateElement-setCurrentDate">@localizer["TAB_GENERAL_LABEL_CURRENT_DATE"]</label>
                                                    <ValidationMessage For="() => dateElement.SetDefaultValueToCurrentDate" />
                                                </div>
                                            </div>
                                        }

                                        @if (SelectedFormElement is FormTableElement tableElement)
                                        {
                                            <div class="form-check">
                                                <div class="checkbox">
                                                    <InputCheckbox @bind-Value="tableElement.AllowAddRows" id="tableElement-allow-add-rows" class="form-check-input" />
                                                    <label for="tableElement-allow-add-rows">@localizer["TAB_GENERAL_LABEL_NEW_ROWS"]</label>
                                                    <ValidationMessage For="() => tableElement.AllowAddRows" />
                                                </div>
                                            </div>
                                        }

                                        @if (SelectedFormElement is not FormTableElement && SelectedFormElement is not FormLabelElement)
                                        {
                                            <div class="form-check">
                                                <div class="checkbox">
                                                    <InputCheckbox @bind-Value="SelectedFormElement.IsRequired" id="formelement-required" class="form-check-input" />
                                                    <label for="formelement-required">@localizer["TAB_GENERAL_LABEL_REQUIRED"]</label>
                                                    <ValidationMessage For="() => SelectedFormElement.IsRequired" />
                                                </div>
                                            </div>
                                        }

                                        <div class="form-check">
                                            <div class="checkbox">
                                                <InputCheckbox @bind-Value="SelectedFormElement.IsActive" id="formelement-active" class="form-check-input" />
                                                <label for="formelement-active">@localizer["TAB_GENERAL_LABEL_ACTIVE"]</label>
                                                <ValidationMessage For="() => SelectedFormElement.IsActive" />
                                            </div>
                                        </div>

                                        <div class="form-check">
                                            <div class="checkbox">
                                                <InputCheckbox @bind-Value="SelectedFormElement.ResetOnCopy" id="formelement-reset_on_copy" class="form-check-input" />
                                                <label for="formelement-reset_on_copy">@localizer["TAB_GENERAL_LABEL_RESET_ON_COPY"]</label>
                                                <ValidationMessage For="() => SelectedFormElement.ResetOnCopy" />
                                            </div>
                                        </div>

                                        @if (SelectedFormElement is FormTextElementBase textElement)
                                        {
                                            <div class="form-floating mb-3">
                                                <InputNumber @bind-Value="textElement.MinLength" class="form-control" id="textelement-minlength" placeholder="@localizer["TAB_GENERAL_LABEL_MIN_LENGTH"]" />
                                                <label for="textelement-minlength">@localizer["TAB_GENERAL_LABEL_MIN_LENGTH"]</label>
                                                <ValidationMessage For="() => textElement.MinLength" />
                                            </div>

                                            <div class="form-floating mb-3">
                                                <InputNumber @bind-Value="textElement.MaxLength" class="form-control" id="textelement-maxlength" placeholder="@localizer["TAB_GENERAL_LABEL_MAX_LENGTH"]" />
                                                <label for="textelement-maxlength">@localizer["TAB_GENERAL_LABEL_MAX_LENGTH"]</label>
                                                <ValidationMessage For="() => textElement.MaxLength" />
                                            </div>

                                            <div class="form-floating mb-3">
                                                <InputTextArea @bind-Value="textElement.RegexPattern" class="form-control" id="textelement-regex" placeholder="@localizer["TAB_GENERAL_LABEL_REGEX"]" />
                                                <label for="textelement-regex">@localizer["TAB_GENERAL_LABEL_REGEX"]</label>
                                                <ValidationMessage For="() => textElement.RegexPattern" />
                                            </div>
                                        }

                                        @if (SelectedFormElement is FormFileElement fileElement)
                                        {
                                            <div class="form-floating mb-3">
                                                <InputNumber @bind-Value="fileElement.MinSize" class="form-control" id="fileelement-minsize" placeholder="@localizer["TAB_GENERAL_LABEL_MIN_FILESIZE"]" />
                                                <label for="fileelement-minsize">@localizer["TAB_GENERAL_LABEL_MIN_FILESIZE"]</label>
                                                <ValidationMessage For="() => fileElement.MinSize" />
                                            </div>

                                            <div class="form-floating mb-3">
                                                <InputNumber @bind-Value="fileElement.MaxSize" class="form-control" id="fileelement-maxsize" placeholder="@localizer["TAB_GENERAL_LABEL_MAX_FILESIZE"]" />
                                                <label for="fileelement-maxsize">@localizer["TAB_GENERAL_LABEL_MAX_FILESIZE"]</label>
                                                <ValidationMessage For="() => fileElement.MaxSize" />
                                            </div>

                                            <div class="mb-3">
                                                <InputTags Value="fileElement.AcceptedFileTypes" Label="@localizer["TAB_GENERAL_LABEL_ACCEPTED_FILETYPES"]" Options="_fileTypeOptions" ValidateTag="ValidateFileTypeAsync" />
                                                <ValidationMessage For="() => fileElement.AcceptedFileTypes" />
                                            </div>

                                            <div class="form-check">
                                                <div class="checkbox">
                                                    <InputCheckbox @bind-Value="fileElement.AllowMultipleFiles" id="fileelement-multiple" class="form-check-input" />
                                                    <label for="fileelement-multiple">@localizer["TAB_GENERAL_LABEL_UPLOAD_MULTIPLE"]</label>
                                                    <ValidationMessage For="() => fileElement.AllowMultipleFiles" />
                                                </div>
                                            </div>
                                        }

                                        @if (SelectedFormElement is FormElementWithOptions elementWithOptions)
                                        {
                                            <h4>Optionen</h4>
                                            <div class="table-responsive">
                                                <table class="table table-xs">
                                                    <thead>
                                                        <tr>
                                                            <th>@localizer["TAB_GENERAL_OPTIONS_TH_NAME"]</th>
                                                            <th>@localizer["TAB_GENERAL_OPTIONS_TH_ACTION"]</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>

                                                        @foreach (var option in elementWithOptions.Options)
                                                        {
                                                            <tr>
                                                                <td>
                                                                    <InputText @bind-Value="option.Name" class="form-control" />
                                                                    <ValidationMessage For="() => option.Name" />
                                                                </td>
                                                                <td>
                                                                    <button type="button" class="btn btn-danger" @onclick="() => elementWithOptions.Options.Remove(option)">
                                                                        <Icon Name="IconName.Trash" Size="IconSize.x5" />
                                                                    </button>
                                                                </td>
                                                            </tr>
                                                        }

                                                        <tr>
                                                            <td colspan="2">
                                                                <button type="button" class="btn btn-success" @onclick="() => elementWithOptions.Options.Add(new())"><Icon Name="IconName.PlusLg" Size="IconSize.x5" /></button>
                                                            </td>
                                                        </tr>
                                                    </tbody>
                                                </table>
                                            </div>

                                        }


                                    </div>
                                </div>

                                <div class="@(GetTabClass(SelectedFormElement.ActiveTab is FormElementTabs.Rules))">
                                    <RuleEditor Input="SelectedFormElement" />
                                </div>

                                @if (SelectedFormElement is FormTableElement formTableElement)
                                {
                                    <div class="@(GetTabClass(SelectedFormElement.ActiveTab is FormElementTabs.Elements))">
                                        <Dropzone DragStart="(item) => StateHasChanged()" TItem="FormElement" Class="table-dropzone large-dropzone" OnItemDrop="(x) => x.TableParentElementId = -1" Items="formTableElement.Elements" Context="element" Accepts="((x, y) => x is not FormTableElement)">
                                            <div class="formular-element grid-item">
                                                <div class="element-wrapper" @ondblclick="() => OpenFormElementAsync(element)">(@element.GetElementType()) @element <button type="button" class="btn btn-primary" @onclick="() => OpenFormElementAsync(element)"><Icon Name="IconName.PencilSquare" Size="IconSize.x5" /></button></div>
                                            </div>
                                        </Dropzone>
                                    </div>
                                }

                                @if (SelectedFormElement is FormNumberElement formNumberElement)
                                {
                                    <div class="@(GetTabClass(SelectedFormElement.ActiveTab is FormElementTabs.CalcSets))">

                                        <Dropzone Items="formNumberElement.CalcRules" Context="calc_rule">
                                            <ElementCalcRule Input="Input"
                                                             Rule="calc_rule"
                                                             Element="SelectedFormElement"
                                                             OnDelete="(rule) => formNumberElement.CalcRules.Remove(rule)" />
                                        </Dropzone>
                                        <button type="button" class="btn btn-success" @onclick="() => formNumberElement.CalcRules.Add(new())"><Icon Name="IconName.PlusLg" Size="IconSize.x5" /></button>

                                    </div>
                                }

                                <div class="@(GetTabClass(SelectedFormElement.ActiveTab is FormElementTabs.Row))">
                                    @if (SelectedFormElement.Row is not null)
                                    {
                                        <ul class="nav nav-pills mb-3 edit-page-nav-link" role="tablist">
                                            <li class="nav-item">
                                                <button type="button" role="tab" class="@(GetTabNavClass(SelectedFormElement.Row.ActiveTab is FormRowTabs.General))" @onclick="() => SelectedFormElement.Row.ActiveTab = FormRowTabs.General">
                                                    @localizer["TABS_GENERAL"]
                                                </button>
                                            </li>
                                            <li class="nav-item">
                                                <button type="button" role="tab" class="@(GetTabNavClass(SelectedFormElement.Row.ActiveTab is FormRowTabs.Rules))" @onclick="() => SelectedFormElement.Row.ActiveTab = FormRowTabs.Rules">
                                                    @localizer["TABS_RULES"]
                                                </button>
                                            </li>
                                        </ul>

                                        <div class="tab-content">
                                            <div class="@(GetTabClass(SelectedFormElement.Row.ActiveTab is FormRowTabs.General))">
                                                <div class="col-12">
                                                    <div class="form-check">
                                                        <div class="checkbox">
                                                            <InputCheckbox @bind-Value="SelectedFormElement.Row.IsActive" id="formrow-active" class="form-check-input" />
                                                            <label for="formrow-active">@localizer["TAB_GENERAL_LABEL_ACTIVE"]</label>
                                                            <ValidationMessage For="() => SelectedFormElement.Row.IsActive" />
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="@(GetTabClass(SelectedFormElement.Row.ActiveTab is FormRowTabs.Rules))">
                                                <RuleEditor Input="SelectedFormElement.Row" />
                                            </div>
                                        </div>
                                    }
                                </div>

                                <div class="@(GetTabClass(SelectedFormElement.ActiveTab is FormElementTabs.Column))">
                                    @if (SelectedFormElement.Parent is not null)
                                    {
                                        <ul class="nav nav-pills mb-3 edit-page-nav-link" role="tablist">
                                            <li class="nav-item">
                                                <button type="button" role="tab" class="@(GetTabNavClass(SelectedFormElement.Parent.ActiveTab is FormColumnTabs.General))" @onclick="() => SelectedFormElement.Parent.ActiveTab = FormColumnTabs.General">
                                                    @localizer["TABS_GENERAL"]
                                                </button>
                                            </li>
                                            <li class="nav-item">
                                                <button type="button" role="tab" class="@(GetTabNavClass(SelectedFormElement.Parent.ActiveTab is FormColumnTabs.Rules))" @onclick="() => SelectedFormElement.Parent.ActiveTab = FormColumnTabs.Rules">
                                                    @localizer["TABS_RULES"]
                                                </button>
                                            </li>
                                        </ul>

                                        <div class="tab-content">
                                            <div class="@(GetTabClass(SelectedFormElement.Parent.ActiveTab is FormColumnTabs.General))">
                                                <div class="col-12">
                                                    <div class="form-check">
                                                        <div class="checkbox">
                                                            <InputCheckbox @bind-Value="SelectedFormElement.Parent.IsActive" id="formcolumn-active" class="form-check-input" />
                                                            <label for="formcolumn-active">@localizer["TAB_GENERAL_LABEL_ACTIVE"]</label>
                                                            <ValidationMessage For="() => SelectedFormElement.Parent.IsActive" />
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="@(GetTabClass(SelectedFormElement.Parent.ActiveTab is FormColumnTabs.Rules))">
                                                <RuleEditor Input="SelectedFormElement.Parent" />
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </EditForm>
                    </div>
                }

                @if (EditFormProperties)
                {
                    <div class="formular-element-editor">
                        <EditForm Model="Input">
                            <Tabs class="mb-1">
                                <Tab Title="@localizer["TABS_GENERAL"]">
                                    <Content>
                                        <div class="form-floating mb-3">
                                            <InputText @bind-Value="Input.Name" class="form-control" id="form-name" placeholder="@localizer["TAB_GENERAL_LABEL_NAME"]" required />
                                            <label for="form-name">@localizer["TAB_GENERAL_LABEL_NAME"]</label>
                                            <ValidationMessage For="() => Input.Name" />
                                        </div>

                                        <div class="form-floating mb-3">
                                            <InputTextArea @bind-Value="Input.Description" class="form-control" id="form-description" placeholder="@localizer["TAB_GENERAL_LABEL_DESCRIPTION"]" />
                                            <label for="form-description">@localizer["TAB_GENERAL_LABEL_DESCRIPTION"]</label>
                                            <ValidationMessage For="() => Input.Description" />
                                        </div>

                                        <div class="form-floating mb-3">
                                            <InputSelect @bind-Value="Input.LanguageId" class="form-select" id="form-default-language" aria-placeholder="@localizer["TAB_GENERAL_LABEL_LANGUAGE"]">
                                                @foreach (var language in AppdatenService.Languages)
                                                {
                                                    <option value="@language.Id">@language.Name</option>
                                                }
                                            </InputSelect>
                                            <label for="form-default-language">@localizer["TAB_GENERAL_LABEL_LANGUAGE"]</label>
                                            <ValidationMessage For="() => Input.LanguageId" />
                                        </div>

                                        <div class="form-floating mb-3">
                                            <InputSelect @bind-Value="Input.DefaultStatusId" class="form-select" id="form-default-status" aria-placeholder="@localizer["TAB_GENERAL_LABEL_DEFAULT_STATUS"]">
                                                @foreach (var status in Statuses)
                                                {
                                                    var description = status.GetLocalization(CultureInfo.CurrentCulture);

                                                    <option value="@status.Id">@description?.Name</option>
                                                }
                                            </InputSelect>
                                            <label for="form-default-status">@localizer["TAB_GENERAL_LABEL_DEFAULT_STATUS"]</label>
                                            <ValidationMessage For="() => Input.DefaultStatusId" />
                                        </div>

                                        <div class="form-check">
                                            <div class="checkbox">
                                                <InputCheckbox @bind-Value="Input.IsActive" id="form-active" class="form-check-input" />
                                                <label for="form-active">@localizer["TAB_GENERAL_LABEL_ACTIVE"]</label>
                                                <ValidationMessage For="() => Input.IsActive" />
                                            </div>
                                        </div>
                                    </Content>
                                </Tab>
                                <Tab Title="@localizer["TABS_PERMISSIONS"]">
                                    <Content>
                                        <div class="form-check">
                                            <div class="checkbox">
                                                <InputCheckbox @bind-Value="Input.IsOnlyAvailableForLoggedInUsers" id="form-login-required" class="form-check-input" disabled="@Input.AllowedUsersForNewEntries.Any()" />
                                                <label for="form-login-required">@localizer["TAB_PERMISSIONS_LABEL_LOGIN_REQUIRED"]</label>
                                                <ValidationMessage For="() => Input.IsOnlyAvailableForLoggedInUsers" />
                                            </div>
                                        </div>

                                        <h4>@localizer["TAB_PERMISSIONS_H4_AUTHORIZED_USERS"]</h4>
                                        <p>@localizer["TAB_PERMISSIONS_P_AUTHORIZED_USERS_DESCRIPTION"]</p>

                                        <div class="col-12">
                                            <input type="text" @bind="FilterUser.SearchPhrase" @bind:event="oninput" @bind:after="() => PerformSearch()" placeholder="@localizer["PLACEHOLDER_USER_SEARCH"]" class="form-control" autocomplete="off">

                                            @if (_searchUsers.Any() && !string.IsNullOrWhiteSpace(FilterUser.SearchPhrase))
                                            {
                                                <ul class="autocomplete-dropdown">
                                                    @foreach (var item in _searchUsers)
                                                    {
                                                        <li><button @onclick="async () => await UserSelectedAsync(item, Input.AllowedUsersForNewEntries)" type="button">@item.DisplayName</button></li>
                                                    }
                                                </ul>
                                            }


                                            <div class="autocomplete-search">
                                                @foreach (var item in Input.AllowedUsersForNewEntries)
                                                {
                                                    <p><i @onclick="async () => await UserRemovedAsync(item, Input.AllowedUsersForNewEntries)" class="bi bi-dash-circle-fill"></i> @item.DisplayName</p>
                                                }
                                            </div>
                                        </div>
                                    </Content>
                                </Tab>
                                <Tab Title="@localizer["TABS_MANAGER"]">
                                    <Content>
                                        <p>@localizer["TAB_MANAGER_DESCRIPTION"]</p>

                                        <div class="col-12">
                                            <input type="text" @bind="FilterUser.SearchPhrase" @bind:event="oninput" @bind:after="() => PerformSearch(true)" placeholder="@localizer["PLACEHOLDER_USER_SEARCH"]" class="form-control" autocomplete="off">

                                            @if (_searchManagers.Any() && !string.IsNullOrWhiteSpace(FilterUser.SearchPhrase))
                                            {
                                                <ul class="autocomplete-dropdown">
                                                    @foreach (var item in _searchManagers)
                                                    {
                                                        <li><button @onclick="async () => await UserSelectedAsync(item, Input.ManagerUsers)" type="button">@item.DisplayName</button></li>
                                                    }
                                                </ul>
                                            }


                                            <div class="autocomplete-search">
                                                @foreach (var item in Input.ManagerUsers)
                                                {
                                                    <div class="autocomplete-item-wrapper">
                                                        <i @onclick="async () => await UserRemovedAsync(item, Input.ManagerUsers)" class="bi bi-dash-circle-fill me-1"></i>
                                                        <span>@item.DisplayName</span>
                                                        <div class="manager-optionen">
                                                            <div class="form-check form-switch">
                                                                <input type="checkbox" @bind="item.EmailEnabled" class="form-check-input" id="@($"manager-email-{item.GetHashCode()}")">
                                                                <label class="form-check-label" for="@($"manager-email-{item.GetHashCode()}")">@localizer["MANAGER_OPTION_EMAIL_NOTIFY"]</label>
                                                            </div>

                                                            <div class="form-check form-switch">
                                                                <input type="checkbox" @bind="item.CanApprove" class="form-check-input" id="@($"manager-approve-{item.GetHashCode()}")">
                                                                <label class="form-check-label" for="@($"manager-approve-{item.GetHashCode()}")">@localizer["MANAGER_OPTION_CAN_APPROVE"]</label>
                                                            </div>

                                                            <div class="form-check form-switch">
                                                                <input type="checkbox" @bind="item.StatusChangeNotificationDefault" class="form-check-input" id="@($"manager-status_change_default-{item.GetHashCode()}")">
                                                                <label class="form-check-label" for="@($"manager-status_change_default-{item.GetHashCode()}")">@localizer["MANAGER_OPTION_STATUS_CHANGE_DEFAULT"]</label>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </Content>
                                </Tab>
                                <Tab Title="@localizer["TABS_LOGO"]">
                                    <Content>
                                        <p>@localizer["TAB_LOGO_DESCRIPTION"]</p>
                                        <div class="mb-3">
                                            <div class="toolbar">
                                                <label class="btn btn-dark" for="form-logo">
                                                    @localizer["UPLOAD_LOGO"]
                                                    <InputFile accept="image/png, image/gif, image/jpeg, image/jpg, image/webp;capture=camera" OnChange="UploadLogoAsync" id="form-logo" class="d-none" />
                                                </label>
                                            </div>

                                            @if (Input.Logo.Length > 0)
                                            {
                                                <div class="uploaded-image">
                                                    <img src="@($"data:image/png;base64,{Convert.ToBase64String(Input.Logo)}")" />
                                                    <button type="button" class="btn btn-danger" @onclick="() => Input.Logo = Array.Empty<byte>()"><Icon Name="IconName.Trash" Size="IconSize.x5" /></button>
                                                </div>
                                            }
                                        </div>
                                    </Content>
                                </Tab>
                                <Tab Title="@localizer["TABS_IMAGE"]">
                                    <Content>
                                        <p>Das Bild wird im Dashboard als Vorschaubild verwendet.</p>
                                        <div class="mb-3">
                                            <div class="toolbar">
                                                <label class="btn btn-dark" for="form-image">
                                                    @localizer["UPLOAD_IMAGE"]
                                                    <InputFile accept="image/png, image/gif, image/jpeg, image/jpg, image/webp;capture=camera" OnChange="UploadImageAsync" id="form-image" class="d-none" />
                                                </label>
                                            </div>

                                            @if (Input.Image.Length > 0)
                                            {
                                                <div class="uploaded-image">
                                                    <img src="@($"data:image/png;base64,{Convert.ToBase64String(Input.Image)}")" />
                                                    <button type="button" class="btn btn-danger" @onclick="() => Input.Image = Array.Empty<byte>()"><Icon Name="IconName.Trash" Size="IconSize.x5" /></button>
                                                </div>
                                            }
                                        </div>
                                    </Content>
                                </Tab>
                            </Tabs>
                        </EditForm>
                    </div>
                }

                <div class="form-grid-editor @GetFormGridEditorCssClass()">
                    <div class="grid-container">
                        <Dropzone DragStart="(item) => StateHasChanged()" TItem="FormRow" Class="large-dropzone" Items="Input.Rows" Context="row">

                            <div class="formular-row">
                                <Dropzone DragStart="(item) => StateHasChanged()" OnItemDrop="(column) => OnColumnDroppedAsync(column, row)" TItem="FormColumn" Items="row.Columns" Context="column" ItemWrapperClass="@((x) => $"formular-column")" Accepts="(x, y) => (row.Columns.Count < 4 || row.Columns.Contains(x))">
                                    <Dropzone DragStart="(item) => StateHasChanged()" OnItemDrop="(element) => OnElementDroppedAsync(element, column)" TItem="FormElement" Class="large-dropzone" Items="column.Elements" Context="element">
                                        <div class="formular-element grid-item">
                                            <div class="element-wrapper" @ondblclick="() => OpenFormElementAsync(element)" id="@element.Guid">
                                                <span>(@element.GetElementType()) @element</span>
                                                <div class="element-buttons">
                                                    <button type="button" class="btn btn-primary" @onclick="() => OpenFormElementAsync(element)"><Icon Name="IconName.PencilSquare" /></button>
                                                </div>
                                            </div>
                                        </div>
                                    </Dropzone>
                                </Dropzone>
                            </div>
                        </Dropzone>
                    </div>
                </div>
            </div>


        </div>
        <div class="toolbar-wrapper @GetToobalWrapperCss()">
            <h4>@localizer["TOOLBAR_TITLE"]</h4>
            <ul id="element-toolbar" ondragstart="event.dataTransfer.setData('text', event.target.id);">
                <li draggable="true" class="toolbar-element" @ondragend="CleanToolbarDrag" @ondragstart="StartDragRowFromToolbar">@localizer["TOOLBAR_NEW_ROW"]</li>
                <li draggable="true" class="toolbar-element" @ondragend="CleanToolbarDrag" @ondragstart="StartDragColumnFromToolbar">@localizer["TOOLBAR_NEW_COLUMN"]</li>
                @foreach (var item in AppdatenService.Elements)
                {
                    <li class="toolbar-element @GetToolbarDraggingCss()" draggable="true"
                    @ondragend="CleanToolbarDrag"
                    @ondragstart="() => OnToolbarElementDragStart(item)">@item</li>
                }
            </ul>
        </div>
    </div>
}