@page "/Forms/{FormId:int}"
@page "/Entry/{EntryId:int}"
@using BlazorForms.Core.Pdf.Models
@inject FormService formService
@inject FormEntryService formEntryService
@inject AuthService authService
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager
@inject IOptions<EmailSettings> emailConfig
@inject IStringLocalizer<FormEntryPage> localizer

@if (Input is not null && Input.Form is not null)
{

    <PageTitle>@(String.Format(localizer["PAGETITLE"], Input.Form.Name))</PageTitle>


    <h2 class="page-title">@Input.Form.Name</h2>
    <div class="d-flex justify-content-end gap-1 mb-2">
        @if (Input.EntryId > 0)
        {
            @if (!Copy)
            {

                <Button Color="ButtonColor.Info" Type="ButtonType.Link" To="@($"/Entry/{EntryId}?copy=true")" TooltipTitle="@localizer["BUTTON_TOOLTIP_COPY"]" TooltipPlacement="TooltipPlacement.Top">
                    <Icon Name="IconName.Copy" />
                </Button>


                <button type="button" class="btn btn-primary" @onclick="ShowHistoryModalAsync">@localizer["BUTTON_HISTORY"]</button>

                <button type="button" class="btn btn-secondary" @onclick="OpenStatusModalAsync">
                    <span class="ms-1"><Icon Name="IconName.PencilSquare" /></span>
                    @GetStatus()
                </button>
            }
        }
    </div>
    <EditForm Model="Input" @ref="_form">
        <FluentValidationValidator />
        <ValidationSummary />
        <div class="row">
            <div class="col-md-6">
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Name" class="form-control" id="form-name" placeholder="@localizer["LABEL_ENTRY_NAME"]" />
                    <label for="form-name">@localizer["LABEL_ENTRY_NAME"]</label>
                    <ValidationMessage For="() => Input.Name" />
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-floating mb-3">
                    <InputSelect @bind-Value="Input.Priority" class="form-select" id="form-priority" aria-label="@localizer["LABEL_ENTRY_PRIORITY"]">
                        <option value="@BlazorForms.Core.Enums.Priority.Low">@localizer["PRIORITY_LOW"]</option>
                        <option value="@BlazorForms.Core.Enums.Priority.Normal">@localizer["PRIORITY_NORMAL"]</option>
                        <option value="@BlazorForms.Core.Enums.Priority.High">@localizer["PRIORITY_HIGH"]</option>
                    </InputSelect>
                    <label for="form-priority">@localizer["LABEL_ENTRY_PRIORITY"]</label>
                    <ValidationMessage For="() => Input.Priority" />
                </div>
            </div>
        </div>
        @foreach (var row in Input.Form.Rows)
        {
            @if (row.IsVisible())
            {
                <div class="row">
                    @foreach (var column in row.Columns)
                    {
                        @if (column.IsVisible())
                        {
                            <div class="@row.GetColumnClass()">
                                @foreach (var element in column.Elements)
                                {
                                    <!-- The element needs to be used. Otherwise validation will be strange in some scenarios. Not sure why. LOL -->
                                    @if (!element.IsVisible())
                                    {
                                        <div data-guid="@element.Guid"></div>
                                    }
                                    else
                                    {
                                        if (element is FormCheckboxElement formCheckboxElement)
                                        {
                                            <div class="form-check">
                                                <div class="checkbox">
                                                    <InputCheckbox @bind-Value="formCheckboxElement.Value" id="@($"form-{element.Guid}")" class="form-check-input" />
                                                    <label for="form-@element.Guid">@element.Name</label>
                                                    <ValidationMessage For="() => formCheckboxElement.Value" />
                                                </div>
                                            </div>
                                        }
                                        else if (element is FormDateElement formDateElement)
                                        {
                                            <div class="form-floating mb-3">
                                                <InputDate @bind-Value="formDateElement.Value" class="form-control" id="@($"form-{element.Guid}")" placeholder="@element.Name" />
                                                <label for="@($"form-{element.Guid}")">@element.Name</label>
                                                <ValidationMessage For="() => formDateElement.Value" />
                                            </div>
                                        }
                                        else if (element is FormFileElement formFileElement)
                                        {
                                            <div class="mb-3">

                                                <div class="upload-wrapper">
                                                    <label for="@($"form-{element.Guid}")" class="upload-label">@element.Name</label>
                                                    @* Style wird über das Input gestezt, da es über razor.css nicht funktioniert *@
                                                    <InputFile id="@($"form-{element.Guid}")"
                                                               multiple="@formFileElement.AllowMultipleFiles"
                                                               accept="@formFileElement.GetAcceptTypesDefinition(Storage.MimeTypes)"
                                                               OnChange="(e) => UploadFileAsync(formFileElement, e)"
                                                               style="opacity: 0; width: 100%; cursor: pointer;" />
                                                </div>

                                                <FileListing Files="formFileElement.Values" />
                                            </div>
                                            <ValidationMessage For="() => formFileElement.Values" />
                                        }
                                        else if (element is FormLabelElement formLabelElement)
                                        {
                                            @((MarkupString)formLabelElement.Description)
                                        }
                                        else if (element is FormNumberElement formNumberElement)
                                        {
                                            <div class="form-floating mb-3">
                                                <InputNumber @bind-Value="formNumberElement.Value" class="form-control" id="@($"form-{element.Guid}")" placeholder="@element.Name" step="@formNumberElement.GetStep()" disabled="@(formNumberElement.IsValueCalculated)" />
                                                <label for="@($"form-{element.Guid}")">@element.Name</label>
                                                <ValidationMessage For="() => formNumberElement.Value" />
                                            </div>
                                        }
                                        else if (element is FormRadioElement formRadioElement)
                                        {
                                            <div class="mb-3">
                                                <label>@element.Name</label>
                                                <InputRadioGroup @bind-Value="formRadioElement.Value">
                                                    @foreach (var item in formRadioElement.Options)
                                                    {
                                                        <div class="form-check">
                                                            <InputRadio Value="@item.Name" class="form-check-input" id="@($"radio-{item.GetHashCode()}")" />
                                                            <label class="form-check-label" for="@($"radio-{item.GetHashCode()}")">
                                                                @item.Name
                                                            </label>
                                                        </div>
                                                    }

                                                    @* When options get changed or deleted we need to fake this option for previous form entries *@
                                                    @if (!string.IsNullOrWhiteSpace(formRadioElement.Value) && !formRadioElement.Options.Any(x => x.Name == formRadioElement.Value))
                                                    {
                                                        <div class="form-check">
                                                            <InputRadio Value="@formRadioElement.Value" class="form-check-input" id="@($"radio-{formRadioElement.GetHashCode()}")" />
                                                            <label class="form-check-label" for="@($"radio-{formRadioElement.GetHashCode()}")">
                                                                @formRadioElement.Value
                                                            </label>
                                                        </div>
                                                    }
                                                </InputRadioGroup>
                                                <ValidationMessage For="() => formRadioElement.Value" />
                                            </div>

                                        }
                                        else if (element is FormSelectElement formSelectElement)
                                        {
                                            <div class="form-floating mb-3">
                                                <InputSelect @bind-Value="formSelectElement.Value" class="form-select" id="@($"form-{element.Guid}")" aria-label="@element.Name">
                                                    <option value="">--- Auswahl ---</option>
                                                    @foreach (var item in formSelectElement.Options)
                                                    {
                                                        <option value="@item.Name">@item.Name</option>
                                                    }
                                                    @* When options get changed or deleted we need to fake this option for previous form entries *@
                                                    @if (!string.IsNullOrWhiteSpace(formSelectElement.Value) && !formSelectElement.Options.Any(x => x.Name == formSelectElement.Value))
                                                    {
                                                        <option value="@formSelectElement.Value">@formSelectElement.Value</option>
                                                    }
                                                </InputSelect>
                                                <label for="@($"form-{element.Guid}")">@element.Name</label>
                                                <ValidationMessage For="() => formSelectElement.Value" />
                                            </div>
                                        }
                                        else if (element is FormTableElement formTableElement)
                                        {
                                            var totals = new Dictionary<int, TableSum>();
                                            <h4>@formTableElement.Name</h4>
                                            <div class="toolbar">
                                                <button type="button" class="btn btn-success" @onclick="() => formTableElement.NewRow()"><Icon Name="IconName.PlusLg" Size="IconSize.x5" /></button>
                                            </div>

                                            <div class="blazorforms-table">
                                                @foreach (var tableRow in formTableElement.ElementValues)
                                                {
                                                    <div class="blazor-forms-table-item">
                                                      
                                                        @foreach (var table_element in tableRow)
                                                        {

                                                            @if (table_element is FormCheckboxElement tableFormCheckboxElement)
                                                            {
                                                                <div class="form-check">
                                                                    <div class="checkbox">
                                                                        <InputCheckbox @bind-Value="tableFormCheckboxElement.Value" id="@($"form-{table_element.Guid}")" class="form-check-input" />
                                                                        <label for="form-@table_element.Guid">@table_element.Name</label>
                                                                        <ValidationMessage For="() => tableFormCheckboxElement.Value" />
                                                                    </div>
                                                                </div>
                                                            }
                                                            else if (table_element is FormDateElement tableFormDateElement)
                                                            {
                                                                <div class="form-floating mb-3">
                                                                    <InputDate @bind-Value="tableFormDateElement.Value" class="form-control" id="@($"form-{table_element.Guid}")" placeholder="@table_element.Name" />
                                                                    <label for="@($"form-{table_element.Guid}")">@table_element.Name</label>
                                                                    <ValidationMessage For="() => tableFormDateElement.Value" />
                                                                </div>
                                                            }
                                                            else if (table_element is FormNumberElement tableFormNumberElement)
                                                            {
                                                                string numberFormat = "0.";
                                                                for (int i = 0; i < tableFormNumberElement.DecimalPlaces; i++)
                                                                {
                                                                    numberFormat += "0";
                                                                }
                                                                if (tableFormNumberElement.IsSummable)
                                                                {
                                                                    if (totals.ContainsKey(tableFormNumberElement.SortOrder))
                                                                    {
                                                                        totals[tableFormNumberElement.SortOrder].Value += tableFormNumberElement.Value;
                                                                    }
                                                                    else
                                                                    {
                                                                        totals.Add(tableFormNumberElement.SortOrder, new TableSum(numberFormat, tableFormNumberElement.Value, tableFormNumberElement.Name));
                                                                    }
                                                                }
                                                                <div class="form-floating mb-3">
                                                                    <InputNumber @bind-Value="tableFormNumberElement.Value" class="form-control" id="@($"form-{table_element.Guid}")" placeholder="@table_element.Name" step="@tableFormNumberElement.GetStep()" disabled="@(tableFormNumberElement.IsValueCalculated)" />
                                                                    <label for="@($"form-{table_element.Guid}")">@table_element.Name</label>
                                                                    <ValidationMessage For="() => tableFormNumberElement.Value" />
                                                                </div>
                                                            }
                                                            else if (table_element is FormSelectElement tableFormSelectElement)
                                                            {
                                                                <div class="form-floating mb-3">
                                                                    <InputSelect @bind-Value="tableFormSelectElement.Value" class="form-select" id="@($"form-{table_element.Guid}")" aria-label="@table_element.Name">
                                                                        <option value="">--- Auswahl ---</option>
                                                                        @foreach (var item in tableFormSelectElement.Options)
                                                                        {
                                                                            <option value="@item.Name">@item.Name</option>
                                                                        }
                                                                        @* When options get changed or deleted we need to fake this option for previous form entries *@
                                                                        @if (!string.IsNullOrWhiteSpace(tableFormSelectElement.Value) && !tableFormSelectElement.Options.Any(x => x.Name == tableFormSelectElement.Value))
                                                                        {
                                                                            <option value="@tableFormSelectElement.Value">@tableFormSelectElement.Value</option>
                                                                        }
                                                                    </InputSelect>
                                                                    <label for="@($"form-{table_element.Guid}")">@table_element.Name</label>
                                                                    <ValidationMessage For="() => tableFormSelectElement.Value" />
                                                                </div>
                                                            }
                                                            else if (table_element is FormTextareaElement tableFormTextareaElement)
                                                            {
                                                                <div class="form-floating mb-3">
                                                                    <InputTextArea @bind-Value="tableFormTextareaElement.Value" class="form-control" id="@($"form-{table_element.Guid}")" placeholder="@table_element.Name" />
                                                                    <label for="@($"form-{table_element.Guid}")">@table_element.Name</label>
                                                                    <ValidationMessage For="() => tableFormTextareaElement.Value" />
                                                                </div>
                                                            }
                                                            else if (table_element is FormTextElement tableFormTextElement)
                                                            {
                                                                <div class="form-floating mb-3">
                                                                    <InputText @bind-Value="tableFormTextElement.Value" class="form-control" id="@($"form-{table_element.Guid}")" placeholder="@table_element.Name" />
                                                                    <label for="@($"form-{table_element.Guid}")">@table_element.Name</label>
                                                                    <ValidationMessage For="() => tableFormTextElement.Value" />
                                                                </div>
                                                            }



                                                        }

                                                        @if (formTableElement.ElementValues.Count > 1)
                                                        {
                                                            <button type="button" class="btn btn-danger" @onclick="() => formTableElement.ElementValues.Remove(tableRow)"><Icon Name="IconName.Trash" Size="IconSize.x5" /></button>
                                                        }
                                                        
                                                    </div>

                                                }




                                            </div>

                                            @if (totals.Any())
                                            {
                                                <h4>@localizer["HEADING_SUMS"]</h4>

                                                @foreach (var kvp in totals)
                                                {
                                                    var total = kvp.Value;
                                                    <div class="col">
                                                        <div class="form-floating mb-3">
                                                            <InputNumber @bind-Value="total.Value" class="form-control" id="@($"form-{total.GetHashCode()}")" placeholder="@total.Name" disabled="true" />
                                                            <label for="@($"form-{total.GetHashCode()}")">@total.Name</label>
                                                        </div>
                                                    </div>
                                                }

                                            }

                                        }
                                        else if (element is FormTextareaElement formTextareaElement)
                                        {
                                            <div class="form-floating mb-3">
                                                <InputTextArea @bind-Value="formTextareaElement.Value" class="form-control" id="@($"form-{element.Guid}")" placeholder="@element.Name" />
                                                <label for="@($"form-{element.Guid}")">@element.Name</label>
                                                <ValidationMessage For="() => formTextareaElement.Value" />
                                            </div>
                                        }
                                        else if (element is FormTextElement formTextElement)
                                        {
                                            <div class="form-floating mb-3">
                                                <InputText @bind-Value="formTextElement.Value" class="form-control" id="@($"form-{element.Guid}")" placeholder="@element.Name" />
                                                <label for="@($"form-{element.Guid}")">@element.Name</label>
                                                <ValidationMessage For="() => formTextElement.Value" />
                                            </div>
                                        }
                                    }
                                }
                            </div>
                        }
                    }
                </div>
            }
        }

        @if (IsAdmin || (!IsCompleted && (!Input.IsApproved || IsAllowedToApprove)))
        {
            <div class="toolbar">
                @if (_isSaving)
                {
                    <LoadingButton ButtonClass="btn btn-success" />
                }
                else
                {
                    <button type="button" class="btn btn-success" @onclick="SubmitAsync">@localizer["BUTTON_SUBMIT"]</button>
                }
            </div>
        }
    </EditForm>


    <Modal @ref="_historyModal" Title="@localizer["MODAL_TITLE_HISTORY"]" Size="ModalSize.ExtraLarge">
        <BodyTemplate>
            <EntryHistory EntryId="Input.EntryId" />
        </BodyTemplate>
    </Modal>

}

<Modal @ref="_statusModal" Title="@localizer["MODAL_TITLE_CHANGE_STATUS"]" UseStaticBackdrop="true">
    <BodyTemplate>
        <StatusChangeEditor Entry="Input"
                            User="_user"
                            OnSaved="OnEntryStatusSavedAsync"
                            OnCancel="_statusModal.HideAsync" />
    </BodyTemplate>
</Modal>