@inherits BlazorFormsComponentBase
@typeparam TItem where TItem : IHasRuleSet
@inject IStringLocalizer<RuleEditor> localizer
@if (Input is not null && Input.Form is not null)
{
    <div class="form-floating mb-3">
        <InputSelect @bind-Value="Input.RuleType" class="form-select" id="rule-type" aria-placeholder="@localizer["LABEL_RULE_TYPE"]">
            @foreach (RuleType item in Enum.GetValues(typeof(RuleType)))
            {
                <option value="@item">@item</option>
            }
        </InputSelect>
        <label for="rule-type">@localizer["LABEL_RULE_TYPE"]</label>
    </div>

    @if (Input.GetRuleElements().Any())
    {
        <div class="toolbar">
            <Button Color="ButtonColor.Success" @onclick="AddRuleAsync"><Icon Name="IconName.Plus" Size="IconSize.x5" /></Button>
        </div>
    }
    else
    {
        <div class="alert alert-warning">@localizer["ERROR_NO_RULE_ELEMENTS"]</div>
    }

    <Dropzone Items="Input.Rules" Context="rule">
        <div class="rule">
            <div class="ruleset-wrapper">
                <div class="form-floating">
                    <InputSelect @bind-Value="rule.LogicalOperator" id="@($"rule-logic-{rule.GetHashCode()}")" class="form-select" aria-placeholder="@localizer["LABEL_LOGIC"]">
                        @foreach (LogicalOperator item in Enum.GetValues(typeof(LogicalOperator)))
                        {
                            <option value="@item">@item</option>
                        }
                    </InputSelect>
                    <label for="@($"rule-logic-{rule.GetHashCode()}")">@localizer["LABEL_LOGIC"]</label>
                </div>
                <div class="form-floating">
                    <InputSelect Value="rule.ElementGuid"
                                 ValueChanged="(Guid guid) => OnRuleSetElementChangedAsync(rule, guid)"
                                 ValueExpression="() => rule.ElementGuid"
                                 id="@($"rule-guid-{rule.GetHashCode()}")" class="form-select" aria-placeholder="@localizer["LABEL_ELEMENT"]">
                        @foreach (var item in Input.GetRuleElements())
                        {
                            <option value="@item.Guid">@item</option>
                        }
                    </InputSelect>
                    <label for="@($"rule-logic-{rule.GetHashCode()}")">@localizer["LABEL_ELEMENT"]</label>
                </div>
                <div class="form-floating">
                    @if (rule.Element is not null)
                    {
                        <InputSelect @bind-Value="rule.ComparisonOperator" id="@($"rule-compare-{rule.GetHashCode()}")" class="form-select" aria-placeholder="@localizer["LABEL_OPERATOR"]">
                            @foreach (ComparisonOperator item in GetAllowedOperators(rule.Element))
                        {
                            <option value="@item">@item</option>
                        }
                    </InputSelect>
                        <label for="@($"rule-compare-{rule.GetHashCode()}")">@localizer["LABEL_OPERATOR"]</label>
                    }
                </div>
                <div class="form-floating">
                    @if (rule.Element is FormDateElement formDateElement)
                    {
                        <InputDate @bind-Value="rule.ValueDate" id="@($"rule-date-{rule.GetHashCode()}")" class="form-control" placeholder="@localizer["LABEL_VALUE"]" />
                        <label for="@($"rule-date-{rule.GetHashCode()}")">@localizer["LABEL_VALUE"]</label>
                    }
                    else if (rule.Element is FormNumberElement formNumberElement)
                    {
                        <InputNumber @bind-Value="rule.ValueNumber" id="@($"rule-number-{rule.GetHashCode()}")" class="form-control" placeholder="@localizer["LABEL_VALUE"]" />
                        <label for="@($"rule-number-{rule.GetHashCode()}")">@localizer["LABEL_VALUE"]</label>
                    }
                    else if (rule.Element is FormElementWithOptions formElementWithOptions)
                    {
                        <InputSelect @bind-Value="rule.ValueString" id="@($"rule-options-{rule.GetHashCode()}")" class="form-select" aria-placeholder="@localizer["LABEL_VALUE"]">

                            @foreach (var item in formElementWithOptions.Options)
                        {
                            <option value="@item.Name">@item.Name</option>
                        }
                    </InputSelect>
                        <label for="@($"rule-options-{rule.GetHashCode()}")">@localizer["LABEL_VALUE"]</label>
                    }
                    else if (rule.Element is FormCheckboxElement formCheckboxElement)
                    {
                        <InputSelect @bind-Value="rule.ValueBoolean" id="@($"rule-checkbox-{rule.GetHashCode()}")" class="form-select" aria-placeholder="@localizer["LABEL_VALUE"]">
                            <option value="false">@AppLocalizer["NO"]</option>
                            <option value="true">@AppLocalizer["YES"]</option>
                        </InputSelect>
                        <label for="@($"rule-checkbox-{rule.GetHashCode()}")">@localizer["LABEL_VALUE"]</label>
                    }

                </div>
            </div>
            <button class="btn btn-danger btn-delete-rule" type="button" @onclick="() => Input.Rules.Remove(rule)"><Icon Name="IconName.Trash" Size="IconSize.x5" /></button>
        </div>
    </Dropzone>


}


@code {
    [Parameter, EditorRequired]
    public TItem? Input { get; set; }

    private Task OnRuleSetElementChangedAsync(Rule ruleSet, Guid elementGuid)
    {
        if (Input is not null && Input.Form is not null)
        {
            ruleSet.ValueBoolean = false;
            ruleSet.ValueString = string.Empty;
            ruleSet.ValueNumber = 0;
            ruleSet.ValueDate = default;

            ruleSet.ElementGuid = elementGuid;
            // Set RuleSet to a rule which is available for every element
            ruleSet.ComparisonOperator = ComparisonOperator.Equals;

            var searchElement = Input.GetRuleElements().FirstOrDefault(x => x.Guid == elementGuid);

            if (searchElement is not null)
            {
                ruleSet.Element = searchElement;
                if (searchElement is FormElementWithOptions formElementWithOptions)
                {
                    ruleSet.ValueString = formElementWithOptions.Options.FirstOrDefault()?.Name ?? string.Empty;
                }
            }
            else
            {
                ruleSet.Element = null;
                ruleSet.ValueString = string.Empty;
            }

        }
        return Task.CompletedTask;
    }

    private Task AddRuleAsync()
    {
        if (Input is not null)
        {
            Input.Rules.Add(new());
        }
        return Task.CompletedTask;
    }

    private ComparisonOperator[] GetAllowedOperators(FormElement? element) => element switch
    {
        FormElementWithOptions or FormCheckboxElement => new ComparisonOperator[]
        {
                ComparisonOperator.Equals,
                ComparisonOperator.NotEquals
        },
        FormNumberElement or FormDateElement => new ComparisonOperator[]
        {
                ComparisonOperator.Equals,
                ComparisonOperator.NotEquals,
                ComparisonOperator.LessThanOrEqual,
                ComparisonOperator.GreaterThanOrEqual,
                ComparisonOperator.LessThan,
                ComparisonOperator.GreaterThan
        },
        _ => Array.Empty<ComparisonOperator>()
    };
}
