@inject IStringLocalizer<ElementCalcRule> localizer
@if (Rule is not null && Input is not null && Element is not null)
{
    <div class="rule">
        <div class="ruleset-wrapper">
            <div class="form-floating">
                <InputSelect @bind-Value="Rule.MathOperator" id="@($"calcrule-math-operator-{Rule.GetHashCode()}")" class="form-select" aria-placeholder="@localizer["LABEL_OPERATOR"]">
                    @foreach (MathOperators item in Enum.GetValues(typeof(MathOperators)))
                    {
                        <option value="@item">@item</option>
                    }
                </InputSelect>
                <label for="@($"calcrule-math-operator-{Rule.GetHashCode()}")">@localizer["LABEL_OPERATOR"]</label>
            </div>
            <div class="form-floating">
                <InputSelect Value="Rule.GuidElement"
                         ValueChanged="(Guid guid) => OnRuleSetElementChangedAsync(Rule, guid)"
                         ValueExpression="() => Rule.GuidElement"
                             id="@($"calcrule-guid-{Rule.GetHashCode()}")" class="form-select" aria-placeholder="@localizer["LABEL_ELEMENT"]">
                    @foreach (var item in Input.GetCalcRuleSetElements(Element.TableParentElementId != 0))
                    {
                        @if (item != Element)
                        {
                            <option value="@item.Guid">@item</option>
                        }
                    }
                </InputSelect>
                <label for="@($"calcrule-guid-{Rule.GetHashCode()}")">@localizer["LABEL_ELEMENT"]</label>
            </div>

        </div>
        <button class="btn btn-danger btn-delete-rule" type="button" @onclick="() => OnDelete.InvokeAsync(Rule)"><Icon Name="IconName.Trash" Size="IconSize.x5" /></button>
    </div>
}

@code {
    [Parameter, EditorRequired]
    public CalcRule? Rule { get; set; }

    [Parameter, EditorRequired]
    public Form? Input { get; set; }

    [Parameter, EditorRequired]
    public FormElement? Element { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<CalcRule> OnDelete { get; set; }

    private Task OnRuleSetElementChangedAsync(CalcRule ruleSet, Guid elementGuid)
    {
        if (Input is not null)
        {
            ruleSet.GuidElement = elementGuid;
        }

        return Task.CompletedTask;
    }
}
