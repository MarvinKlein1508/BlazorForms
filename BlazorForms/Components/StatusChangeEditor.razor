@inherits BlazorFormsComponentBase
@inject FormEntryStatusChangeService statusChangeService
@inject FormEntryService formEntryService
@inject UserService userService
@inject AuthService authService
@inject NavigationManager navigationManager
@inject IOptions<EmailSettings> emailSettings
@inject IStringLocalizer<StatusChangeEditor> localizer
@if (Input is not null)
{
    <EditForm Model="Input" @ref="_form">
        <FluentValidationValidator />
        <div class="form-floating mb-3">
            <InputSelect @bind-Value="Input.StatusId" class="form-select" id="status-id" aria-placeholder="@localizer["LABEL_STATUS"]" disabled="@(!_allowStatusChange)">
                <option value="0">@AppLocalizer["SELECT_CHOOSE"]</option>
                @foreach (var status in AppdatenService.Statuses)
                {
                    var description = status.GetLocalization(CultureInfo.CurrentCulture);
                    <option value="@status.UserFilterId">@description?.Name</option>
                }
            </InputSelect>
            <label for="status-id">@localizer["LABEL_STATUS"]</label>
            <ValidationMessage For="() => Input.StatusId" />
        </div>
        <div class="form-floating mb-3">
            <InputTextArea @bind-Value="Input.Comment" class="form-control" id="status-comment" placeholder="@localizer["LABEL_COMMENT"]" />
            <label for="status-comment">@localizer["LABEL_COMMENT"]</label>
            <ValidationMessage For="() => Input.Comment" />
        </div>
        @if (emailSettings.Value.Enabled && Input.Notifiers.Any())
        {
            <h4>@localizer["HEADING_NOTIFY"]</h4>
            <div class="notify-container mb-3">
                @foreach (var notify in Input.Notifiers)
                {
                    <Switch @bind-Value="notify.Notify" Label="@(_availableForNotification.First(x => x.UserFilterId == notify.UserId).DisplayName)" />
                }
            </div>
        }
    </EditForm>

    <div class="toolbar">
        <Button Color="ButtonColor.Danger" @onclick="async () => await OnCancel.InvokeAsync()">@AppLocalizer["CANCEL"]</Button>
        <Button Color="ButtonColor.Success" @onclick="SaveAsync">@AppLocalizer["SAVE"]</Button>
    </div>
}