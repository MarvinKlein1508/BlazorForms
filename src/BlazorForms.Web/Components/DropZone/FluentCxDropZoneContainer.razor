@namespace BlazorForms.Web.Components.DropZone
@using Microsoft.AspNetCore.Components.Rendering
@inherits FluentComponentBase
@typeparam TItem

<CascadingValue Value="this" IsFixed>
    <div id="@GetId()"
         class="@InternalCss"
         style="@InternalStyle"
         role="list"
         @ondragover:preventDefault
         @ondragover="() => { }"
         @ondragenter:preventDefault
         @ondragenter="() => { }"
         @ondrop="@OnDropAsync"
         @ondrop:preventDefault
         ondragstart="event.dataTransfer.setData('text', event.target.id);"
         @ondrop:stopPropagation
         @ondragenter:stopPropagation
         @ondragend:stopPropagation
         @ondragover:stopPropagation
         @ondragleave:stopPropagation
         @ondragstart:stopPropagation
         @attributes=AdditionalAttributes>
        @if (ChildContent is not null)
        {
            @ChildContent

            @if (_children.All(x => x is FluentCxDropZone<TItem>))
            {
                foreach (var child in _children.OfType<FluentCxDropZone<TItem>>())
                {
                    child.RenderInternal();
                }
            }
            else
            {
                foreach (var item in _children.OfType<IDropZoneComponent<TItem>>())
                {
                    if (item.Value is not null)
                    {
                        @_renderItem(item.Value)
                    }
                }
            }
        }
        else if (Items is not null && Items.Count > 0)
        {
            foreach (var item in Items)
            {
                @_renderItem(item)
            }
        }
    </div>
</CascadingValue>

@code
{
    public FluentCxDropZoneContainer()
    {
        _renderItem = value => __builder =>
        {
            <FluentCxDropZone TItem="TItem"
                              ItemCss="@(ItemCss?.Invoke(value))"
                              ForceRender=@(ChildContent is not null)
                              AddInContainer=false
                              Id="@Identifier.NewId()"
                              IsDragAllowed=@(IsItemDraggable(value))
                              IsItemDropAllowed=@((IsDropAllowed?.Invoke(value, State!.ActiveItem)) ?? true)
                              Value="@value"
                              Style="@GetStyle(value)">
                @if (ItemContent is not null)
                {
                    @ItemContent(value)
                }
                else
                {
                    var content = _children.Find(x => x is IItemValue<TItem> t && Equals(t.Value, value));

                    if (content is not null && content is IDropZoneComponent<TItem> t)
                    {
                        @t.Component
                    }
                }
            </FluentCxDropZone>
        };
    }
}
